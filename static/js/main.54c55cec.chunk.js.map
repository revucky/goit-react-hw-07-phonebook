{"version":3,"sources":["components/LangSwitcher/LangSwitcher.module.css","services/api.js","redux/contacts/contactsOperation.js","components/ContactForm/ContactForm.jsx","redux/contacts/contactsSlice.js","components/Fliter/Filter.jsx","components/Phonebook/ContactList.jsx","components/Phonebook/Phonebook.jsx","components/LangSwitcher/LangSwitcher.js","components/LangSwitcher/Ua.png","components/LangSwitcher/Uk.png","components/App/App.jsx","redux/store.js","i18n.js","index.js"],"names":["module","exports","BASE_URL","fetchData","path","a","options","fetch","res","ok","json","Promise","reject","Error","statusText","ENDPOINT","getContact","createAsyncThunk","api","createContacts","newContact","endpoint","item","finalOptions","method","body","JSON","stringify","headers","deleteContacts","id","ContactForm","allContacts","onSubmit","useState","name","setName","number","setNumber","dispatch","useDispatch","t","useTranslation","contactsOperations","reset","isBtnDis","Object","values","some","value","className","e","preventDefault","toast","error","nanoid","type","placeholder","onChange","target","title","required","pattern","disabled","contactsSlice","createSlice","initialState","data","items","loading","filter","reducers","changeFilter","state","payload","extraReducers","builder","addCase","pending","fulfilled","rejected","inx","findIndex","cont","splice","Filter","useSelector","contacts","contactsAction","actions","ContactList","lists","onClick","map","phone","Phonebook","useEffect","color","el","toLowerCase","includes","position","autoClose","lang","uk","icon","nativeName","en","LangSwitcher","props","i18n","s","switcher","keys","lng","btnWrp","resolvedLanguage","active","btn","changeLanguage","src","alt","width","App","fallback","height","timeout","persistConfig","key","storage","blacklist","whitelist","logger","createLogger","collapsed","getState","action","logEntry","timestamp","store","configureStore","reducer","persistReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","devTools","process","persistor","persistStore","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.54c55cec.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"switcher\":\"LangSwitcher_switcher__rPDe9\",\"btn\":\"LangSwitcher_btn__3a1l0\",\"active\":\"LangSwitcher_active__PAcUF LangSwitcher_btn__3a1l0\"};","const BASE_URL = \"https://61c47078f1af4a0017d9953f.mockapi.io\";\n\nconst fetchData = async (path, options = {}) => {\n  const res = await fetch(`${BASE_URL}/${path}`, options);\n  return res.ok ? res.json() : Promise.reject(new Error(res.statusText));\n};\n\nconst getData = (endpoint, options) => fetchData(endpoint, options);\n\nconst addItem = (endpoint, item, options = {}) => {\n  const finalOptions = {\n    method: \"POST\",\n    body: JSON.stringify(item),\n    headers: { \"Content-Type\": \"application/json; charset=UTF-8\" },\n    ...options,\n  };\n  return fetchData(endpoint, finalOptions);\n};\n\nconst deleteItem = (endpoint, id, options = {}) =>\n  fetchData(`${endpoint}/${id}`, { method: \"DELETE\", ...options });\n\nexport { getData, addItem, deleteItem };\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport * as api from \"../../services/api\";\n\nconst ENDPOINT = \"contacts\";\n\nconst getContact = createAsyncThunk(\"contacts/getContactStatus\", async () =>\n  api.getData(ENDPOINT)\n);\n\nconst createContacts = createAsyncThunk(\n  \"contacts/createContactsStatus\",\n  (newContact) => api.addItem(ENDPOINT, newContact)\n);\nconst deleteContacts = createAsyncThunk(\n  \"contacts/ddeleteContactsStatus\",\n  (id) => api.deleteItem(ENDPOINT, id)\n);\n\nexport { getContact, createContacts, deleteContacts };\n","import { useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { nanoid } from \"nanoid\";\nimport { useDispatch } from \"react-redux\";\nimport { useTranslation } from \"react-i18next\";\nimport * as contactsOperations from \"../../redux/contacts/contactsOperation\";\n// import contactsAction from \"../../redux/contacts\";\nimport \"./ContactForm.css\";\n\nconst ContactForm = ({ allContacts, onSubmit }) => {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n  const { createContacts } = contactsOperations;\n  //сабміт форми\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const isDuplicate = (allContacts) => allContacts.name === name;\n    allContacts.some(isDuplicate)\n      ? toast.error(`${name}, вже у твоєму списку контакті!`)\n      : dispatch(createContacts({ name, number, id: nanoid(3) }));\n    // : onSubmit({ name, number, id: nanoid(3) });\n    reset();\n  };\n  // ресет інпутов\n  const reset = () => {\n    setName(\"\");\n    setNumber(\"\");\n  };\n  //disabled 2 способи не активної кнопки\n  const isBtnDis = Object.values({ name, number }).some((value) => {\n    return !value;\n  });\n  // const requiredVal = [name, number];\n  // const isBtnDis = requiredVal.some((value) => !value);\n\n  return (\n    <form className=\"forma\" onSubmit={handleSubmit}>\n      <label className=\"label\">\n        {t(\"contactForm.label\")}\n        <input\n          type=\"text\"\n          name=\"name\"\n          className=\"input\"\n          value={name}\n          placeholder={t(\"contactForm.placeholder\")}\n          onChange={(e) => setName(e.target.value)}\n          // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\" Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan \"\n          required\n        />\n      </label>\n      <br />\n      <label className=\"label\">\n        {t(\"contactForm.labelNum\")}\n        <input\n          type=\"tel\"\n          name=\"number\"\n          // id={nanoid(3)}\n          value={number}\n          className=\"input\"\n          placeholder={t(\"contactForm.placeholderNum\")}\n          onChange={(e) => setNumber(e.target.value)}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\" Phone number must be digits and can contain spaces, dashes, parentheses and can start with + \"\n          required\n        />\n      </label>\n      <br />\n      <button className=\"btn\" type=\"submit\" disabled={isBtnDis}>\n        {t(\"contactForm.button\")}\n      </button>\n    </form>\n  );\n};\n\n// class ContactForm extends Component {\n//   state = {\n//     name: \"\",\n//     number: \"\",\n//   };\n// handleChange = (e) => {\n//   const { name, value } = e.currentTarget;\n//   this.setState({\n//     [name]: value,\n//   });\n// };\n\n//   handleSubmit = (e) => {\n//     e.preventDefault();\n//     const isDuplicate = this.checkIfDuplicate();\n//     if (isDuplicate) {\n//       return alert(`${this.state.name} already exist in your contacts!`);\n//     }\n//     this.props.onSubmit({ ...this.state, id: nanoid(3) });\n//     this.reset();\n//   };\n//   checkIfDuplicate = () =>\n//     this.props.allContacts.some(({ name }) => name === this.state.name);\n\n//   reset = () => {\n//     this.setState({ name: \"\", number: \"\" });\n//   };\n//   render() {\n//     const { handleChange, state, handleSubmit } = this;\n//     const { name, number } = state;\n//     const isBtnDis = Object.values(this.state).some((value) => {\n//       return !value;\n//     });\n//     return (\n//       <form onSubmit={handleSubmit}>\n//         <label>\n//           Name\n//           <input\n//             type=\"text\"\n//             name=\"name\"\n//             value={name}\n//             onChange={handleChange}\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\" Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan \"\n//             required\n//           />\n//         </label>\n//         <br />\n//         <label>\n//           Number\n//           <input\n//             type=\"tel\"\n//             name=\"number\"\n//             // id={nanoid(3)}\n//             value={number}\n//             onChange={handleChange}\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\" Phone number must be digits and can contain spaces, dashes, parentheses and can start with + \"\n//             required\n//           />\n//         </label>\n//         <br />\n//         <button type=\"submit\" disabled={isBtnDis}>\n//           Add contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n\nexport default ContactForm;\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport {\n  getContact,\n  createContacts,\n  deleteContacts,\n} from \"./contactsOperation\";\nconst initialState = {\n  data: {\n    items: [],\n    loading: false,\n    error: null,\n  },\n  filter: \"\",\n};\nconst contactsSlice = createSlice({\n  name: \"contacts\",\n  initialState,\n  reducers: {\n    // getContact: (state, { payload }) => ({ ...state, items: payload }),\n    // createContacts: (state, { payload }) => ({\n    //   ...state,\n    //   items: [...state.items, payload],\n    // }),\n    // deleteContacts: (state, { payload }) => ({\n    //   ...state,\n    //   items: state.items.filter((contact) => contact.id !== payload),\n    // }),\n    changeFilter: (state, { payload }) => ({ ...state, filter: payload }),\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(getContact.pending, (state) => {\n        state.data.loading = true;\n        state.data.error = null;\n      })\n      .addCase(getContact.fulfilled, (state, { payload }) => {\n        state.data.loading = false;\n        state.data.items = payload;\n      })\n      .addCase(getContact.rejected, (state, { payload }) => {\n        state.data.loading = false;\n        state.data.error = payload;\n      })\n      // add\n      .addCase(createContacts.pending, (state) => {\n        state.data.loading = true;\n        state.data.error = null;\n      })\n      .addCase(createContacts.fulfilled, (state, { payload }) => {\n        state.data.loading = false;\n        // state.data.items.push(payload);\n        state.data.items = [...state.data.items, payload];\n      })\n      .addCase(createContacts.rejected, (state, { payload }) => {\n        state.data.loading = false;\n        state.data.error = payload;\n      })\n      //delete\n      .addCase(deleteContacts.pending, (state) => {\n        state.data.loading = true;\n        state.data.error = null;\n      })\n      .addCase(deleteContacts.fulfilled, (state, { payload }) => {\n        state.data.loading = false;\n        const inx = state.data.items.findIndex(\n          (cont) => cont.id === payload.id\n        );\n        state.data.items.splice(inx, 1);\n      })\n      .addCase(deleteContacts.rejected, (state, { payload }) => {\n        state.data.loading = false;\n        state.data.error = payload;\n      });\n  },\n});\nexport default contactsSlice;\n\n// export const { createContacts, deleteContacts, changeFilter } =\n//   contactsSlice.actions;\n// export default contactsSlice.reducers;\n\n// import { createSlice, combineReducers } from \"@reduxjs/toolkit\";\n\n// const itemsSlice = createSlice({\n//   name: \"items\",\n//   initialState: [],\n//   reducer: {\n// createContacts: (state, action) => [...state, action.payload],\n// deleteContacts: (state, action) =>\n//   state.filter((contact) => contact.id !== action.payload),\n//   },\n// });\n\n// const filterSlice = createSlice({\n//   name: \"filter\",\n//   initialState: \"\",\n//   reducer: {\n//     changeFilter: (_, action) => action.payload,\n//   },\n// });\n// export const { createContacts, deleteContacts } = itemsSlice.actions;\n// export const { changeFilter } = filterSlice.actions;\n\n// const contactsReducer = combineReducers({\n//   [itemsSlice.name]: itemsSlice.reducer,\n//   [filterSlice.name]: filterSlice.reducer,\n// });\n// export default contactsReducer;\n","import { useSelector, useDispatch } from \"react-redux\";\nimport contactsAction from \"../../redux/contacts\";\nimport { useTranslation } from \"react-i18next\";\nimport \"./Filter.css\";\n\nconst Filter = () => {\n  const filter = useSelector((state) => state.contacts.filter);\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n  const { changeFilter } = contactsAction.actions;\n  return (\n    <div className=\"filterWrap\">\n      <p className=\"title-filter\">{t(\"filter.p\")}</p>\n      <input\n        className=\"input\"\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        placeholder={t(\"filter.filterPlaceholder\")}\n        onChange={(e) => dispatch(changeFilter(e.target.value))}\n      />\n    </div>\n  );\n};\n\nexport default Filter;\n","import React from \"react\";\n// import { useDispatch } from \"react-redux\";\n// import contactsAction from \"../../redux/contacts\";\nimport { useTranslation } from \"react-i18next\";\nimport \"./Phonebook.css\";\nimport { GrUserManager } from \"react-icons/gr\";\n\nconst ContactList = ({ lists, onClick }) => {\n  // const dispatch = useDispatch();\n  const { t } = useTranslation();\n  return (\n    <div>\n      <ul className=\"list\">\n        {lists.map(({ name, phone, id }) => (\n          <li className=\"list-item\" key={id}>\n            <GrUserManager className=\"icon\" /> {name}: {phone}\n            <button\n              className=\"btn btn-list\"\n              type=\"button\"\n              id={id}\n              onClick={() => onClick(id)}\n            >\n              {t(\"contactList.delete\")}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\n// ContactList.propTypes = {\n//   lists: PropTypes.array,\n// };\n\nexport default ContactList;\n","import { useEffect } from \"react\";\n// import React, { Component } from \"react\";\n// import { useLocalStorage } from \"react-use\";\n\nimport ContactForm from \"../ContactForm/ContactForm\";\nimport { useSelector, useDispatch } from \"react-redux\";\n// import contactsAction from \"../../redux/contacts\";\nimport * as contactsOperations from \"../../redux/contacts/contactsOperation\";\nimport Filter from \"../Fliter/Filter\";\nimport ContactList from \"./ContactList\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n// import * as storage from \"../../services/localStorage\";\nimport { useTranslation } from \"react-i18next\";\nimport \"./Phonebook.css\";\nimport { ImAddressBook } from \"react-icons/im\";\n\n// const STORAGE_KEY = \"contacts\";\nconst { getContact, deleteContacts } = contactsOperations;\n\nconst Phonebook = () => {\n  // // const [contacts, setContacts] = useLocalStorage(STORAGE_KEY, []);\n  // const [filter, setFilter] = useState(\"\");\n  const { t } = useTranslation();\n  const contacts = useSelector((state) => state.contacts.data.items);\n  const filter = useSelector((state) => state.contacts.filter);\n  // const loading = useSelector((state) => state.contacts.data.loading);\n  // const error = useSelector((state) => state.contacts.data.error);\n  const dispatch = useDispatch();\n  // console.log(contactsAction);\n\n  //локал сторадж\n  // useEffect(() => {\n  //   storage.save(STORAGE_KEY, contacts);\n  // }, [contacts]);\n  useEffect(() => {\n    dispatch(getContact());\n  }, [dispatch]);\n  // додавання\n  // const handleCreate = (newContact) => {\n  //   dispatch(createContacts(newContact));\n  //   // setContacts((prevState) => [...prevState, newContact]);\n  // };\n  // const { deleteContacts } = contactsAction.actions;\n  // видалення\n  const handleDelete = (id) => {\n    // setContacts(contacts.filter((contact) => contact.id !== ev.target.id));\n    dispatch(deleteContacts(id));\n  };\n  // пошук по імені\n  // const handleFilter = (value) => dispatch(actions.changeFilter());\n  const getFilter = () => {\n    return contacts.filter((el) =>\n      el.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n  return (\n    <div className=\"main\">\n      <h1 className=\"hero\">\n        {/* <AiFillPlusSquare color=\"#f57b0b\" className=\"icon\" /> */}\n        <ImAddressBook color=\"#f57b0b\" className=\"icon\" />\n        {t(\"phonebook.title\")}\n      </h1>\n      <ContactForm allContacts={contacts} />\n      <h2 className=\"title\">{t(\"phonebook.subtitle\")}</h2>\n      <Filter />\n      <ContactList lists={getFilter()} onClick={handleDelete} />\n      <ToastContainer position=\"top-center\" autoClose={3000} />\n    </div>\n  );\n};\n// const mapStateToProps = (state) => ({});\n// const mapDispatchToPTops = (dispatch) => ({});\n\n// const connectContacts = connect(mapStateToProps, mapDispatchToPTops);\nexport default Phonebook;\n\n// export default class Phonebook extends React.Component {\n//   state = {\n//     contacts: [],\n//     filter: \"\",\n//   };\n\n//   componentDidMount() {\n//     const savedContact = storage.get(STORAGE_KEY);\n//     if (savedContact) {\n//       this.setState({ contacts: savedContact });\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     const { contacts } = this.state;\n//     if (prevState.contacts !== contacts) {\n//       storage.save(STORAGE_KEY, contacts);\n//     }\n//   }\n\n//   //зміни;\n//   handleChange = (e) => {\n//     const { name, value } = e.currentTarget;\n//     this.setState({ [name]: value });\n//   };\n//   // створення;\n//   handleCreate = (newContact) => {\n//     this.setState((prevState) => ({\n//       contacts: [...prevState.contacts, newContact],\n//     }));\n//   };\n//   //видалення\n//   handleDelete = (ev) => {\n//     this.setState((prevState) => ({\n//       contacts: prevState.contacts.filter(\n//         (contact) => contact.id !== ev.target.id\n//       ),\n//     }));\n//   };\n\n//   handleFilter = (value) => this.setState({ filter: value });\n//   getFilter = () => {\n//     const { contacts, filter } = this.state;\n//     return contacts.filter((contact) =>\n//       contact.name.toLowerCase().includes(filter.toLowerCase())\n//     );\n//   };\n\n//   render() {\n//     const { handleCreate, handleDelete, handleFilter, getFilter } = this;\n//     const { filter, contacts } = this.state;\n\n//     return (\n//       <div>\n//         <h1>Phonebook</h1>\n//         <ContactForm allContacts={contacts} onSubmit={handleCreate} />\n//         <h2>Contacts</h2>\n//         <Filter value={filter} onChange={handleFilter} />\n//         <ContactList lists={getFilter()} onClick={handleDelete} />\n//       </div>\n//     );\n//   }\n// }\n","import { useTranslation } from \"react-i18next\";\nimport s from \"./LangSwitcher.module.css\";\nimport ukrFlag from \"./Ua.png\";\nimport ukFlag from \"./Uk.png\";\n\nconst lang = {\n  uk: { icon: ukrFlag, nativeName: \"українська\" },\n  en: { icon: ukFlag, nativeName: \"english\" },\n};\nconst LangSwitcher = (props) => {\n  const { i18n } = useTranslation();\n  return (\n    <div className={s.switcher}>\n      {Object.keys(lang).map((lng) => (\n        <div className={s.btnWrp} key={lng}>\n          <button\n            className={i18n.resolvedLanguage === lng ? s.active : s.btn}\n            type=\"submit\"\n            onClick={() => i18n.changeLanguage(lng)}\n          >\n            <img src={lang[lng].icon} alt={lang[lng].nativeName} width=\"30\" />\n          </button>\n        </div>\n      ))}\n    </div>\n  );\n};\nexport default LangSwitcher;\n","export default __webpack_public_path__ + \"static/media/Ua.1684b729.png\";","export default __webpack_public_path__ + \"static/media/Uk.da5a98ee.png\";","import Phonebook from \"../Phonebook/Phonebook\";\nimport { Suspense } from \"react\";\nimport Loader from \"react-loader-spinner\";\nimport LangSwitcher from \"../LangSwitcher/LangSwitcher.js\";\n\nconst App = () => {\n  return (\n    <div>\n      <Suspense\n        fallback={\n          <Loader\n            type=\"Bars\"\n            color=\"#00BFFF\"\n            height={80}\n            width={80}\n            timeout={3000}\n          />\n        }\n      >\n        <LangSwitcher />\n      </Suspense>\n      <Suspense fallback=\"\">\n        <Phonebook />\n      </Suspense>\n    </div>\n  );\n};\n\nexport default App;\n","// import { createStore, combineReducers } from \"redux\";\n// import { devToolsEnhancer } from \"redux-devtools-extension\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport { createLogger } from \"redux-logger\";\n// import thunk from \"redux-thunk\";\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport contactsAction from \"./contacts\";\n\n// const rootReducer = combineReducers({\n//   contacts: contactsReducer,\n// });\n// const store = createStore(rootReducer, devToolsEnhancer());\nconst persistConfig = {\n  key: \"contact\",\n  storage,\n  blacklist: [\"filter\"],\n  whitelist: [\"items\"],\n};\n\nconst logger = createLogger({\n  collapsed: (getState, action, logEntry) => !logEntry.error,\n  timestamp: false,\n});\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(persistConfig, contactsAction.reducer),\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }).concat(logger),\n  devTools: process.env.NODE_ENV !== \"production\",\n});\nconst persistor = persistStore(store);\n\nexport { store, persistor };\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\n\nimport Backend from \"i18next-http-backend\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\n// import translationEN from \"./locales/en/translation.json\";\n// import translationUA from \"./locales/ua/translation.json\";\n\n// const resources = {\n//   en: {\n//     translation: translationEN,\n//   },\n//   ua: {\n//     translation: translationUA,\n//   },\n// };\ni18n\n  // load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\n  // learn more: https://github.com/i18next/i18next-http-backend\n  // want your translations to be loaded from a professional CDN? => https://github.com/locize/react-tutorial#step-2---use-the-locize-cdn\n  .use(Backend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    // resources,\n    fallbackLng: \"uk\",\n    debug: true,\n  });\n\nexport default i18n;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App/App\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { store, persistor } from \"./redux/store\";\nimport \"./i18n\";\nimport \"./styles/index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}